// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

import javax.annotation.concurrent.NotThreadSafe;

@NotThreadSafe
public class Variable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Variable(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Variable obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Variable obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn) {
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      }
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("Finalize")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DrealJNI.deleteVariable(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Variable(Variable arg0) {
    this(DrealJNI.newVariableSWIG0(Variable.getCPtr(arg0), arg0), true);
  }

  public Variable assignOperator(Variable arg0) {
    return new Variable(
        DrealJNI.variableAssignOperatorSWIG0(swigCPtr, this, Variable.getCPtr(arg0), arg0), false);
  }

  public Variable() {
    this(DrealJNI.newVariableSWIG1(), true);
  }

  public Variable(String name, Variable.Type.Kind type) {
    this(DrealJNI.newVariableSWIG2(name, type.swigValue()), true);
  }

  public Variable(String name) {
    this(DrealJNI.newVariableSWIG3(name), true);
  }

  public Variable(String name, Variable.Type.Kind type, boolean modelVariable) {
    this(DrealJNI.newVariableSWIG4(name, type.swigValue(), modelVariable), true);
  }

  public boolean isDummy() {
    return DrealJNI.variableIsDummy(swigCPtr, this);
  }

  public long getId() {
    return DrealJNI.variableGetId(swigCPtr, this);
  }

  public Variable.Type.Kind getType() {
    return Variable.Type.swigToEnum(DrealJNI.variableGetType(swigCPtr, this));
  }

  public long getHash() {
    return DrealJNI.variableGetHash(swigCPtr, this);
  }

  public String getName() {
    return DrealJNI.variableGetName(swigCPtr, this);
  }

  @Override
  public String toString() {
    return DrealJNI.variableToString(swigCPtr, this);
  }

  public boolean equalTo(Variable v) {
    return DrealJNI.variableEqualTo(swigCPtr, this, Variable.getCPtr(v), v);
  }

  public boolean less(Variable v) {
    return DrealJNI.variableLess(swigCPtr, this, Variable.getCPtr(v), v);
  }

  public static final class Type {
    public static final Variable.Type.Kind CONTINUOUS = new Variable.Type.Kind("CONTINUOUS");
    public static final Variable.Type.Kind INTEGER = new Variable.Type.Kind("INTEGER");
    public static final Variable.Type.Kind BINARY = new Variable.Type.Kind("BINARY");
    public static final Variable.Type.Kind BOOLEAN = new Variable.Type.Kind("BOOLEAN");
    private static Type.Kind[] swigValues = {CONTINUOUS, INTEGER, BINARY, BOOLEAN};
    private static int swigNext = 0;

    public static Type.Kind swigToEnum(int swigValue) {
      if (swigValue < swigValues.length
          && swigValue >= 0
          && swigValues[swigValue].swigValue() == swigValue) {
        return swigValues[swigValue];
      }
      for (int i = 0; i < swigValues.length; i++) {
        if (swigValues[i].swigValue() == swigValue) {
          return swigValues[i];
        }
      }
      throw new IllegalArgumentException("No enum " + Type.Kind.class + " with value " + swigValue);
    }

    public static class Kind {
      private final String swigName;
      private final int swigValue;

      public Kind(String swigName) {
        this.swigName = swigName;
        swigValue = swigNext;
        incrementSwigNext();
      }

      private void incrementSwigNext() {
        swigNext++;
      }

      public int swigValue() {
        return swigValue;
      }

      @Override
      public String toString() {
        return swigName;
      }
    }
  }
}
