// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class DrealJNI {

  private DrealJNI() {
    throw new UnsupportedOperationException("This is a utility class and cannot be instantiated.");
  }

  public static native void formulaSetIteratorIncrementUnchecked(
      long jarg1, FormulaSet.Iterator jarg11);

  public static native long formulaSetIteratorDerefUnchecked(
      long jarg1, FormulaSet.Iterator jarg11);

  public static native boolean formulaSetIteratorIsNot(
      long jarg1, FormulaSet.Iterator jarg11, long jarg2, FormulaSet.Iterator jarg22);

  public static native void deleteFormulaSetIterator(long jarg1);

  public static native long newFormulaSetSWIG0();

  public static native long newFormulaSetSWIG1(long jarg1, FormulaSet jarg11);

  public static native boolean formulaSetIsEmpty(long jarg1, FormulaSet jarg11);

  public static native void formulaSetClear(long jarg1, FormulaSet jarg11);

  public static native long formulaSetBegin(long jarg1, FormulaSet jarg11);

  public static native long formulaSetEnd(long jarg1, FormulaSet jarg11);

  public static native boolean formulaSetAddImpl(
      long jarg1, FormulaSet jarg11, long jarg2, Formula jarg22);

  public static native boolean formulaSetContainsImpl(
      long jarg1, FormulaSet jarg11, long jarg2, Formula jarg22);

  public static native boolean formulaSetRemoveImpl(
      long jarg1, FormulaSet jarg11, long jarg2, Formula jarg22);

  public static native int formulaSetSizeImpl(long jarg1, FormulaSet jarg11);

  public static native boolean formulaSetHasNextImpl(
      long jarg1, FormulaSet jarg11, long jarg2, FormulaSet.Iterator jarg22);

  public static native void deleteFormulaSet(long jarg1);

  public static native long newFormulaVectorSWIG0();

  public static native long newFormulaVectorSWIG1(long jarg1, FormulaVector jarg11);

  public static native long formulaVectorCapacity(long jarg1, FormulaVector jarg11);

  public static native void formulaVectorReserve(long jarg1, FormulaVector jarg11, long jarg2);

  public static native boolean formulaVectorIsEmpty(long jarg1, FormulaVector jarg11);

  public static native void formulaVectorClear(long jarg1, FormulaVector jarg11);

  public static native long newFormulaVectorSWIG2(int jarg1, long jarg2, Formula jarg22);

  public static native int formulaVectorDoSize(long jarg1, FormulaVector jarg11);

  public static native void formulaVectorDoAddSWIG0(
      long jarg1, FormulaVector jarg11, long jarg2, Formula jarg22);

  public static native void formulaVectorDoAddSWIG1(
      long jarg1, FormulaVector jarg11, int jarg2, long jarg3, Formula jarg33);

  public static native long formulaVectorDoRemove(long jarg1, FormulaVector jarg11, int jarg2);

  public static native long formulaVectorDoGet(long jarg1, FormulaVector jarg11, int jarg2);

  public static native long formulaVectorDoSet(
      long jarg1, FormulaVector jarg11, int jarg2, long jarg3, Formula jarg33);

  public static native void formulaVectorDoRemoveRange(
      long jarg1, FormulaVector jarg11, int jarg2, int jarg3);

  public static native void deleteFormulaVector(long jarg1);

  public static native long newVariableVectorSWIG0();

  public static native long newVariableVectorSWIG1(long jarg1, VariableVector jarg11);

  public static native long variableVectorCapacity(long jarg1, VariableVector jarg11);

  public static native void variableVectorReserve(long jarg1, VariableVector jarg11, long jarg2);

  public static native boolean variableVectorIsEmpty(long jarg1, VariableVector jarg11);

  public static native void variableVectorClear(long jarg1, VariableVector jarg11);

  public static native long newVariableVectorSWIG2(int jarg1, long jarg2, Variable jarg22);

  public static native int variableVectorDoSize(long jarg1, VariableVector jarg11);

  public static native void variableVectorDoAddSWIG0(
      long jarg1, VariableVector jarg11, long jarg2, Variable jarg22);

  public static native void variableVectorDoAddSWIG1(
      long jarg1, VariableVector jarg11, int jarg2, long jarg3, Variable jarg33);

  public static native long variableVectorDoRemove(long jarg1, VariableVector jarg11, int jarg2);

  public static native long variableVectorDoGet(long jarg1, VariableVector jarg11, int jarg2);

  public static native long variableVectorDoSet(
      long jarg1, VariableVector jarg11, int jarg2, long jarg3, Variable jarg33);

  public static native void variableVectorDoRemoveRange(
      long jarg1, VariableVector jarg11, int jarg2, int jarg3);

  public static native void deleteVariableVector(long jarg1);

  public static native long newExpressionVectorSWIG0();

  public static native long newExpressionVectorSWIG1(long jarg1, ExpressionVector jarg11);

  public static native long expressionVectorCapacity(long jarg1, ExpressionVector jarg11);

  public static native void expressionVectorReserve(
      long jarg1, ExpressionVector jarg11, long jarg2);

  public static native boolean expressionVectorIsEmpty(long jarg1, ExpressionVector jarg11);

  public static native void expressionVectorClear(long jarg1, ExpressionVector jarg11);

  public static native long newExpressionVectorSWIG2(int jarg1, long jarg2, Expression jarg22);

  public static native int expressionVectorDoSize(long jarg1, ExpressionVector jarg11);

  public static native void expressionVectorDoAddSWIG0(
      long jarg1, ExpressionVector jarg11, long jarg2, Expression jarg22);

  public static native void expressionVectorDoAddSWIG1(
      long jarg1, ExpressionVector jarg11, int jarg2, long jarg3, Expression jarg33);

  public static native long expressionVectorDoRemove(
      long jarg1, ExpressionVector jarg11, int jarg2);

  public static native long expressionVectorDoGet(long jarg1, ExpressionVector jarg11, int jarg2);

  public static native long expressionVectorDoSet(
      long jarg1, ExpressionVector jarg11, int jarg2, long jarg3, Expression jarg33);

  public static native void expressionVectorDoRemoveRange(
      long jarg1, ExpressionVector jarg11, int jarg2, int jarg3);

  public static native void deleteExpressionVector(long jarg1);

  public static native long newExpressionDoubleMapSWIG0();

  public static native long newExpressionDoubleMapSWIG1(long jarg1, ExpressionDoubleMap jarg11);

  public static native long expressionDoubleMapIteratorGetNextUnchecked(
      long jarg1, ExpressionDoubleMap.Iterator jarg11);

  public static native boolean expressionDoubleMapIteratorIsNot(
      long jarg1,
      ExpressionDoubleMap.Iterator jarg11,
      long jarg2,
      ExpressionDoubleMap.Iterator jarg22);

  public static native long expressionDoubleMapIteratorGetKey(
      long jarg1, ExpressionDoubleMap.Iterator jarg11);

  public static native double expressionDoubleMapIteratorGetValue(
      long jarg1, ExpressionDoubleMap.Iterator jarg11);

  public static native void expressionDoubleMapIteratorSetValue(
      long jarg1, ExpressionDoubleMap.Iterator jarg11, double jarg2);

  public static native void deleteExpressionDoubleMapIterator(long jarg1);

  public static native boolean expressionDoubleMapIsEmpty(long jarg1, ExpressionDoubleMap jarg11);

  public static native void expressionDoubleMapClear(long jarg1, ExpressionDoubleMap jarg11);

  public static native long expressionDoubleMapFind(
      long jarg1, ExpressionDoubleMap jarg11, long jarg2, Expression jarg22);

  public static native long expressionDoubleMapBegin(long jarg1, ExpressionDoubleMap jarg11);

  public static native long expressionDoubleMapEnd(long jarg1, ExpressionDoubleMap jarg11);

  public static native int expressionDoubleMapSizeImpl(long jarg1, ExpressionDoubleMap jarg11);

  public static native boolean expressionDoubleMapContainsImpl(
      long jarg1, ExpressionDoubleMap jarg11, long jarg2, Expression jarg22);

  public static native void expressionDoubleMapPutUnchecked(
      long jarg1, ExpressionDoubleMap jarg11, long jarg2, Expression jarg22, double jarg3);

  public static native void expressionDoubleMapRemoveUnchecked(
      long jarg1, ExpressionDoubleMap jarg11, long jarg2, ExpressionDoubleMap.Iterator jarg22);

  public static native void deleteExpressionDoubleMap(long jarg1);

  public static native long newExpressionExpressionMapSWIG0();

  public static native long newExpressionExpressionMapSWIG1(
      long jarg1, ExpressionExpressionMap jarg11);

  public static native long expressionExpressionMapIteratorGetNextUnchecked(
      long jarg1, ExpressionExpressionMap.Iterator jarg11);

  public static native boolean expressionExpressionMapIteratorIsNot(
      long jarg1,
      ExpressionExpressionMap.Iterator jarg11,
      long jarg2,
      ExpressionExpressionMap.Iterator jarg22);

  public static native long expressionExpressionMapIteratorGetKey(
      long jarg1, ExpressionExpressionMap.Iterator jarg11);

  public static native long expressionExpressionMapIteratorGetValue(
      long jarg1, ExpressionExpressionMap.Iterator jarg11);

  public static native void expressionExpressionMapIteratorSetValue(
      long jarg1, ExpressionExpressionMap.Iterator jarg11, long jarg2, Expression jarg22);

  public static native void deleteExpressionExpressionMapIterator(long jarg1);

  public static native boolean expressionExpressionMapIsEmpty(
      long jarg1, ExpressionExpressionMap jarg11);

  public static native void expressionExpressionMapClear(
      long jarg1, ExpressionExpressionMap jarg11);

  public static native long expressionExpressionMapFind(
      long jarg1, ExpressionExpressionMap jarg11, long jarg2, Expression jarg22);

  public static native long expressionExpressionMapBegin(
      long jarg1, ExpressionExpressionMap jarg11);

  public static native long expressionExpressionMapEnd(long jarg1, ExpressionExpressionMap jarg11);

  public static native int expressionExpressionMapSizeImpl(
      long jarg1, ExpressionExpressionMap jarg11);

  public static native boolean expressionExpressionMapContainsImpl(
      long jarg1, ExpressionExpressionMap jarg11, long jarg2, Expression jarg22);

  public static native void expressionExpressionMapPutUnchecked(
      long jarg1,
      ExpressionExpressionMap jarg11,
      long jarg2,
      Expression jarg22,
      long jarg3,
      Expression jarg33);

  public static native void expressionExpressionMapRemoveUnchecked(
      long jarg1,
      ExpressionExpressionMap jarg11,
      long jarg2,
      ExpressionExpressionMap.Iterator jarg22);

  public static native void deleteExpressionExpressionMap(long jarg1);

  public static native long newDoubleIntPairSWIG0();

  public static native long newDoubleIntPairSWIG1(double jarg1, int jarg2);

  public static native long newDoubleIntPairSWIG2(long jarg1, DoubleIntPair jarg11);

  public static native void doubleIntPairFirstSet(long jarg1, DoubleIntPair jarg11, double jarg2);

  public static native double doubleIntPairFirstGet(long jarg1, DoubleIntPair jarg11);

  public static native void doubleIntPairSecondSet(long jarg1, DoubleIntPair jarg11, int jarg2);

  public static native int doubleIntPairSecondGet(long jarg1, DoubleIntPair jarg11);

  public static native void deleteDoubleIntPair(long jarg1);

  public static native long newBoxBoxPairSWIG0();

  public static native long newBoxBoxPairSWIG1(long jarg1, Box jarg11, long jarg2, Box jarg22);

  public static native long newBoxBoxPairSWIG2(long jarg1, BoxBoxPair jarg11);

  public static native void boxBoxPairFirstSet(
      long jarg1, BoxBoxPair jarg11, long jarg2, Box jarg22);

  public static native long boxBoxPairFirstGet(long jarg1, BoxBoxPair jarg11);

  public static native void boxBoxPairSecondSet(
      long jarg1, BoxBoxPair jarg11, long jarg2, Box jarg22);

  public static native long boxBoxPairSecondGet(long jarg1, BoxBoxPair jarg11);

  public static native void deleteBoxBoxPair(long jarg1);

  public static native long newVaribaleIntUnorderedMapSWIG0();

  public static native long newVaribaleIntUnorderedMapSWIG1(
      long jarg1, VariableIntUnorderedMap jarg11);

  public static native long varibaleIntUnorderedMapIteratorGetNextUnchecked(
      long jarg1, VariableIntUnorderedMap.Iterator jarg11);

  public static native boolean varibaleIntUnorderedMapIteratorIsNot(
      long jarg1,
      VariableIntUnorderedMap.Iterator jarg11,
      long jarg2,
      VariableIntUnorderedMap.Iterator jarg22);

  public static native long varibaleIntUnorderedMapIteratorGetKey(
      long jarg1, VariableIntUnorderedMap.Iterator jarg11);

  public static native int varibaleIntUnorderedMapIteratorGetValue(
      long jarg1, VariableIntUnorderedMap.Iterator jarg11);

  public static native void varibaleIntUnorderedMapIteratorSetValue(
      long jarg1, VariableIntUnorderedMap.Iterator jarg11, int jarg2);

  public static native void deleteVaribaleIntUnorderedMapIterator(long jarg1);

  public static native boolean varibaleIntUnorderedMapIsEmpty(
      long jarg1, VariableIntUnorderedMap jarg11);

  public static native void varibaleIntUnorderedMapClear(
      long jarg1, VariableIntUnorderedMap jarg11);

  public static native long varibaleIntUnorderedMapFind(
      long jarg1, VariableIntUnorderedMap jarg11, long jarg2, Variable jarg22);

  public static native long varibaleIntUnorderedMapBegin(
      long jarg1, VariableIntUnorderedMap jarg11);

  public static native long varibaleIntUnorderedMapEnd(long jarg1, VariableIntUnorderedMap jarg11);

  public static native int varibaleIntUnorderedMapSizeImpl(
      long jarg1, VariableIntUnorderedMap jarg11);

  public static native boolean varibaleIntUnorderedMapContainsImpl(
      long jarg1, VariableIntUnorderedMap jarg11, long jarg2, Variable jarg22);

  public static native void varibaleIntUnorderedMapPutUnchecked(
      long jarg1, VariableIntUnorderedMap jarg11, long jarg2, Variable jarg22, int jarg3);

  public static native void varibaleIntUnorderedMapRemoveUnchecked(
      long jarg1,
      VariableIntUnorderedMap jarg11,
      long jarg2,
      VariableIntUnorderedMap.Iterator jarg22);

  public static native void deleteVaribaleIntUnorderedMap(long jarg1);

  public static native long newSharedPointerToVector();

  public static native void deleteSharedPointerToVector(long jarg1);

  public static native long newSharedPointerToUnorderedMapWithHashValue();

  public static native void deleteSharedPointerToUnorderedMapWithHashValue(long jarg1);

  public static native long newSharedPointerToUnorderedMap();

  public static native void deleteSharedPointerToUnorderedMap(long jarg1);

  public static native long newVariableSWIG0(long jarg1, Variable jarg11);

  public static native long variableAssignOperatorSWIG0(
      long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long newVariableSWIG1();

  public static native void deleteVariable(long jarg1);

  public static native long newVariableSWIG2(String jarg1, int jarg2);

  public static native long newVariableSWIG3(String jarg1);

  public static native long newVariableSWIG4(String jarg1, int jarg2, boolean jarg3);

  public static native boolean variableIsDummy(long jarg1, Variable jarg11);

  public static native long variableGetId(long jarg1, Variable jarg11);

  public static native int variableGetType(long jarg1, Variable jarg11);

  public static native long variableGetHash(long jarg1, Variable jarg11);

  public static native String variableGetName(long jarg1, Variable jarg11);

  public static native String variableToString(long jarg1, Variable jarg11);

  public static native boolean variableEqualTo(
      long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native boolean variableLess(
      long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long insertOperatorSWIG0(long jarg1, long jarg2, Variable jarg22);

  public static native long insertOperatorSWIG1(long jarg1, int jarg2);

  public static native long newVariablesSWIG0(long jarg1, Variables jarg11);

  public static native long variablesAssignOperatorSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long newVariablesSWIG1();

  public static native void deleteVariables(long jarg1);

  public static native long newVariablesSWIG2(long jarg1);

  public static native long variablesGetHash(long jarg1, Variables jarg11);

  public static native long variablesSize(long jarg1, Variables jarg11);

  public static native boolean variablesEmpty(long jarg1, Variables jarg11);

  public static native String variablesToString(long jarg1, Variables jarg11);

  public static native long variablesBeginSWIG0(long jarg1, Variables jarg11);

  public static native long variablesEndSWIG0(long jarg1, Variables jarg11);

  public static native long variablesCbegin(long jarg1, Variables jarg11);

  public static native long variablesCend(long jarg1, Variables jarg11);

  public static native long variablesRbeginSWIG0(long jarg1, Variables jarg11);

  public static native long variablesRendSWIG0(long jarg1, Variables jarg11);

  public static native long variablesCrbegin(long jarg1, Variables jarg11);

  public static native long variablesCrend(long jarg1, Variables jarg11);

  public static native void variablesInsertSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native void variablesInsertSWIG2(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long variablesEraseSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native long variablesEraseSWIG1(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long variablesFindSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native boolean variablesInclude(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native boolean variablesIsSubsetOf(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native boolean variablesIsSupersetOf(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native boolean variablesIsStrictSubsetOf(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native boolean variablesIsStrictSupersetOf(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native boolean equalSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native boolean lessSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long insertOperatorSWIG2(long jarg1, long jarg2, Variables jarg22);

  public static native long intersect(long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long addEqualSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long addEqualSWIG1(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native long addSWIG0(long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long addSWIG1(long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native long addSWIG2(long jarg1, Variable jarg11, long jarg2, Variables jarg22);

  public static native long substractEqualSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long substractEqualSWIG1(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native long substractSWIG0(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long substractSWIG1(
      long jarg1, Variables jarg11, long jarg2, Variable jarg22);

  public static native long newEnvironmentSWIG0(long jarg1, Environment jarg11);

  public static native long environmentAssignOperatorSWIG0(
      long jarg1, Environment jarg11, long jarg2, Environment jarg22);

  public static native long newEnvironmentSWIG1();

  public static native void deleteEnvironment(long jarg1);

  public static native long newEnvironmentSWIG2(long jarg1);

  public static native long newEnvironmentSWIG3(long jarg1);

  public static native long newEnvironmentSWIG4(long jarg1);

  public static native long environmentBeginSWIG0(long jarg1, Environment jarg11);

  public static native long environmentEndSWIG0(long jarg1, Environment jarg11);

  public static native long environmentCbegin(long jarg1, Environment jarg11);

  public static native long environmentCend(long jarg1, Environment jarg11);

  public static native void environmentInsert(
      long jarg1, Environment jarg11, long jarg2, Variable jarg22, double jarg3);

  public static native boolean environmentEmpty(long jarg1, Environment jarg11);

  public static native long environmentSize(long jarg1, Environment jarg11);

  public static native long environmentFindSWIG0(
      long jarg1, Environment jarg11, long jarg2, Variable jarg22);

  public static native long environmentDomain(long jarg1, Environment jarg11);

  public static native String environmentToString(long jarg1, Environment jarg11);

  public static native long environmentIndexingSWIG0(
      long jarg1, Environment jarg11, long jarg2, Variable jarg22);

  public static native long insertOperatorSWIG3(long jarg1, long jarg2, Environment jarg22);

  public static native boolean lessSWIG1(int jarg1, int jarg2);

  public static native long newExpressionSWIG0(long jarg1, Expression jarg11);

  public static native long expressionAssignOperatorSWIG0(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native void deleteExpression(long jarg1);

  public static native long newExpressionSWIG1();

  public static native long newExpressionSWIG2(double jarg1);

  public static native long newExpressionSWIG3(long jarg1, Variable jarg11);

  public static native int expressionGetKind(long jarg1, Expression jarg11);

  public static native long expressionGetHash(long jarg1, Expression jarg11);

  public static native long expressionGetVariables(long jarg1, Expression jarg11);

  public static native boolean expressionEqualTo(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native boolean expressionLess(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native boolean expressionIsPolynomial(long jarg1, Expression jarg11);

  public static native boolean expressionIncludeIte(long jarg1, Expression jarg11);

  public static native double expressionEvaluateSWIG0(
      long jarg1, Expression jarg11, long jarg2, Environment jarg22);

  public static native double expressionEvaluateSWIG1(long jarg1, Expression jarg11);

  public static native long expressionEvaluatePartial(
      long jarg1, Expression jarg11, long jarg2, Environment jarg22);

  public static native long expressionExpand(long jarg1, Expression jarg11);

  public static native long expressionSubstituteSWIG0(
      long jarg1, Expression jarg11, long jarg2, Variable jarg22, long jarg3, Expression jarg33);

  public static native long expressionSubstituteSWIG1(
      long jarg1, Expression jarg11, long jarg2, long jarg3);

  public static native long expressionSubstituteSWIG2(long jarg1, Expression jarg11, long jarg2);

  public static native long expressionSubstituteSWIG3(long jarg1, Expression jarg11, long jarg2);

  public static native long expressionDifferentiate(
      long jarg1, Expression jarg11, long jarg2, Variable jarg22);

  public static native String expressionToString(long jarg1, Expression jarg11);

  public static native long expressionZero();

  public static native long expressionOne();

  public static native long expressionPi();

  public static native long expressionE();

  public static native long expressionNaN();

  public static native long addSWIG3(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long addEqualSWIG2(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long expressionIncrementSWIG0(long jarg1, Expression jarg11);

  public static native long expressionIncrementSWIG1(long jarg1, Expression jarg11, int jarg2);

  public static native long substractSWIG2(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long substractEqualSWIG2(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long addSWIG7(long jarg1, Expression jarg11);

  public static native long substractSWIG6(long jarg1, Expression jarg11);

  public static native long expressionDecrementSWIG0(long jarg1, Expression jarg11);

  public static native long expressionDecrementSWIG1(long jarg1, Expression jarg11, int jarg2);

  public static native long multiplySWIG0(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long multiplyEqual(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long divide(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long divideEqual(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long realConstant(double jarg1, double jarg2, boolean jarg3);

  public static native long log(long jarg1, Expression jarg11);

  public static native long abs(long jarg1, Expression jarg11);

  public static native long exp(long jarg1, Expression jarg11);

  public static native long sqrt(long jarg1, Expression jarg11);

  public static native long pow(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long sin(long jarg1, Expression jarg11);

  public static native long cos(long jarg1, Expression jarg11);

  public static native long tan(long jarg1, Expression jarg11);

  public static native long asin(long jarg1, Expression jarg11);

  public static native long acos(long jarg1, Expression jarg11);

  public static native long atan(long jarg1, Expression jarg11);

  public static native long atan2(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long sinh(long jarg1, Expression jarg11);

  public static native long cosh(long jarg1, Expression jarg11);

  public static native long tanh(long jarg1, Expression jarg11);

  public static native long min(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long max(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long ifThenElse(
      long jarg1, Formula jarg11, long jarg2, Expression jarg22, long jarg3, Expression jarg33);

  public static native long uninterpretedFunction(String jarg1, long jarg2, Variables jarg22);

  public static native long insertOperatorSWIG4(long jarg1, long jarg2, Expression jarg22);

  public static native boolean isConstantSWIG0(long jarg1, Expression jarg11);

  public static native boolean isRealConstant(long jarg1, Expression jarg11);

  public static native boolean isVariableSWIG0(long jarg1, Expression jarg11);

  public static native boolean isAddition(long jarg1, Expression jarg11);

  public static native boolean isMultiplication(long jarg1, Expression jarg11);

  public static native boolean isDivision(long jarg1, Expression jarg11);

  public static native boolean isLog(long jarg1, Expression jarg11);

  public static native boolean isAbs(long jarg1, Expression jarg11);

  public static native boolean isExp(long jarg1, Expression jarg11);

  public static native boolean isSqrt(long jarg1, Expression jarg11);

  public static native boolean isPow(long jarg1, Expression jarg11);

  public static native boolean isSin(long jarg1, Expression jarg11);

  public static native boolean isCos(long jarg1, Expression jarg11);

  public static native boolean isTan(long jarg1, Expression jarg11);

  public static native boolean isAsin(long jarg1, Expression jarg11);

  public static native boolean isAcos(long jarg1, Expression jarg11);

  public static native boolean isAtan(long jarg1, Expression jarg11);

  public static native boolean isAtan2(long jarg1, Expression jarg11);

  public static native boolean isSinh(long jarg1, Expression jarg11);

  public static native boolean isCosh(long jarg1, Expression jarg11);

  public static native boolean isTanh(long jarg1, Expression jarg11);

  public static native boolean isMin(long jarg1, Expression jarg11);

  public static native boolean isMax(long jarg1, Expression jarg11);

  public static native boolean isIfThenElse(long jarg1, Expression jarg11);

  public static native boolean isUninterpretedFunction(long jarg1, Expression jarg11);

  public static native long sum(long jarg1, ExpressionVector jarg11);

  public static native long prod(long jarg1, ExpressionVector jarg11);

  public static native void swap(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native boolean isConstantSWIG1(long jarg1, Expression jarg11, double jarg2);

  public static native boolean isZero(long jarg1, Expression jarg11);

  public static native boolean isOne(long jarg1, Expression jarg11);

  public static native boolean isNegOne(long jarg1, Expression jarg11);

  public static native boolean isTwo(long jarg1, Expression jarg11);

  public static native boolean isNan(long jarg1, Expression jarg11);

  public static native double getConstantValue(long jarg1, Expression jarg11);

  public static native double getLbOfRealConstant(long jarg1, Expression jarg11);

  public static native double getUbOfRealConstant(long jarg1, Expression jarg11);

  public static native long getVariableSWIG0(long jarg1, Expression jarg11);

  public static native long getArgument(long jarg1, Expression jarg11);

  public static native long getFirstArgument(long jarg1, Expression jarg11);

  public static native long getSecondArgument(long jarg1, Expression jarg11);

  public static native double getConstantInAddition(long jarg1, Expression jarg11);

  public static native long getExprToCoeffMapInAddition(long jarg1, Expression jarg11);

  public static native double getConstantInMultiplication(long jarg1, Expression jarg11);

  public static native long getBaseToExponentMapInMultiplication(long jarg1, Expression jarg11);

  public static native long getConditionalFormula(long jarg1, Expression jarg11);

  public static native long getThenExpression(long jarg1, Expression jarg11);

  public static native long getElseExpression(long jarg1, Expression jarg11);

  public static native String getUninterpretedFunctionName(long jarg1, Expression jarg11);

  public static native long addSWIG8(long jarg1, Variable jarg11);

  public static native long substractSWIG8(long jarg1, Variable jarg11);

  public static native boolean lessSWIG2(int jarg1, int jarg2);

  public static native long newFormulaSWIG0();

  public static native long newFormulaSWIG1(long jarg1, Formula jarg11);

  public static native long formulaAssignOperatorSWIG0(
      long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native void deleteFormula(long jarg1);

  public static native long newFormulaSWIG2(long jarg1, Variable jarg11);

  public static native int formulaGetKind(long jarg1, Formula jarg11);

  public static native long formulaGetHash(long jarg1, Formula jarg11);

  public static native long formulaGetFreeVariables(long jarg1, Formula jarg11);

  public static native boolean formulaEqualTo(
      long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native boolean formulaLess(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native boolean formulaEvaluateSWIG0(
      long jarg1, Formula jarg11, long jarg2, Environment jarg22);

  public static native boolean formulaEvaluateSWIG1(long jarg1, Formula jarg11);

  public static native long formulaSubstituteSWIG0(
      long jarg1, Formula jarg11, long jarg2, Variable jarg22, long jarg3, Expression jarg33);

  public static native long formulaSubstituteSWIG1(
      long jarg1, Formula jarg11, long jarg2, Variable jarg22, long jarg3, Formula jarg33);

  public static native long formulaSubstituteSWIG2(
      long jarg1, Formula jarg11, long jarg2, long jarg3);

  public static native long formulaSubstituteSWIG3(long jarg1, Formula jarg11, long jarg2);

  public static native long formulaSubstituteSWIG4(long jarg1, Formula jarg11, long jarg2);

  public static native String formulaToString(long jarg1, Formula jarg11);

  public static native long formulaTrue();

  public static native long formulaFalse();

  public static native boolean formulaBoolOperator(long jarg1, Formula jarg11);

  public static native long insertOperatorSWIG5(long jarg1, long jarg2, Formula jarg22);

  public static native boolean isFalse(long jarg1, Formula jarg11);

  public static native boolean isTrue(long jarg1, Formula jarg11);

  public static native boolean isVariableSWIG1(long jarg1, Formula jarg11);

  public static native boolean isEqualTo(long jarg1, Formula jarg11);

  public static native boolean isNotEqualTo(long jarg1, Formula jarg11);

  public static native boolean isGreaterThan(long jarg1, Formula jarg11);

  public static native boolean isGreaterThanOrEqualTo(long jarg1, Formula jarg11);

  public static native boolean isLessThan(long jarg1, Formula jarg11);

  public static native boolean isLessThanOrEqualTo(long jarg1, Formula jarg11);

  public static native boolean isRelational(long jarg1, Formula jarg11);

  public static native boolean isConjunction(long jarg1, Formula jarg11);

  public static native boolean isDisjunction(long jarg1, Formula jarg11);

  public static native boolean isNegation(long jarg1, Formula jarg11);

  public static native boolean isForall(long jarg1, Formula jarg11);

  public static native long formulaMakeConjunction(
      long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long formulaMakeDisjunction(
      long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long notSWIG0(long jarg1, Formula jarg11);

  public static native long equalSWIG1(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long notEqualSWIG0(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long lessSWIG3(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long lessEqual(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long grater(long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native long graterEqual(
      long jarg1, Expression jarg11, long jarg2, Expression jarg22);

  public static native boolean formulaIncludeIte(long jarg1, Formula jarg11);

  public static native long forall(long jarg1, Variables jarg11, long jarg2, Formula jarg22);

  public static native long andSWIG0(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long andSWIG4(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long andSWIG6(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native long andSWIG8(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long orSWIG0(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long orSWIG4(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long orSWIG6(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native long orSWIG8(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long notSWIG1(long jarg1, Variable jarg11);

  public static native long equalSWIG2(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long equalSWIG3(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long equalSWIG4(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long equalSWIG5(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native long notEqualSWIG1(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long notEqualSWIG2(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long notEqualSWIG3(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long notEqualSWIG4(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native boolean isNary(long jarg1, Formula jarg11);

  public static native long getVariableSWIG1(long jarg1, Formula jarg11);

  public static native long getLhsExpression(long jarg1, Formula jarg11);

  public static native long getRhsExpression(long jarg1, Formula jarg11);

  public static native long getOperands(long jarg1, Formula jarg11);

  public static native long getOperand(long jarg1, Formula jarg11);

  public static native long getQuantifiedVariables(long jarg1, Formula jarg11);

  public static native long getQuantifiedFormula(long jarg1, Formula jarg11);

  public static native long logicAnd(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long implySWIG0(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long implySWIG1(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long implySWIG2(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native long implySWIG3(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long iffSWIG0(long jarg1, Formula jarg11, long jarg2, Formula jarg22);

  public static native long iffSWIG1(long jarg1, Variable jarg11, long jarg2, Formula jarg22);

  public static native long iffSWIG2(long jarg1, Formula jarg11, long jarg2, Variable jarg22);

  public static native long iffSWIG3(long jarg1, Variable jarg11, long jarg2, Variable jarg22);

  public static native long map(long jarg1, FormulaSet jarg11, long jarg2);

  public static native boolean isAtomic(long jarg1, Formula jarg11);

  public static native boolean isClause(long jarg1, Formula jarg11);

  public static native long getClauses(long jarg1, Formula jarg11);

  public static native boolean isCnf(long jarg1, Formula jarg11);

  public static native boolean haveIntersection(
      long jarg1, Variables jarg11, long jarg2, Variables jarg22);

  public static native long deltaStrengthen(long jarg1, Formula jarg11, double jarg2);

  public static native long deltaWeaken(long jarg1, Formula jarg11, double jarg2);

  public static native boolean isDifferentiableSWIG0(long jarg1, Formula jarg11);

  public static native boolean isDifferentiableSWIG1(long jarg1, Expression jarg11);

  public static native long makeConjunction(long jarg1, FormulaVector jarg11);

  public static native long makeDisjunction(long jarg1, FormulaVector jarg11);

  public static native long createVectorSWIG0(String jarg1, int jarg2, int jarg3);

  public static native long createVectorSWIG1(String jarg1, int jarg2);

  public static native int not(int jarg1);

  public static native long insertOperatorSWIG6(long jarg1, int jarg2);

  public static native int parseLogic(String jarg1);

  public static native long insertOperatorSWIG7(long jarg1, int jarg2);

  public static native long newBoxSWIG0();

  public static native long newBoxSWIG1(long jarg1, VariableVector jarg11);

  public static native long newBoxSWIG2(long jarg1, Box jarg11);

  public static native long boxAssignOperatorSWIG0(long jarg1, Box jarg11, long jarg2, Box jarg22);

  public static native void deleteBox(long jarg1);

  public static native void boxAddSWIG0(long jarg1, Box jarg11, long jarg2, Variable jarg22);

  public static native void boxAddSWIG1(
      long jarg1, Box jarg11, long jarg2, Variable jarg22, double jarg3, double jarg4);

  public static native boolean boxEmpty(long jarg1, Box jarg11);

  public static native void boxSetEmpty(long jarg1, Box jarg11);

  public static native int boxSize(long jarg1, Box jarg11);

  public static native long boxIndexingSWIG0(long jarg1, Box jarg11, int jarg2);

  public static native long boxIndexingSWIG1(long jarg1, Box jarg11, long jarg2, Variable jarg22);

  public static native long boxVariables(long jarg1, Box jarg11);

  public static native long boxVariable(long jarg1, Box jarg11, int jarg2);

  public static native boolean boxHasVariable(long jarg1, Box jarg11, long jarg2, Variable jarg22);

  public static native long boxIntervalVector(long jarg1, Box jarg11);

  public static native long boxMutableIntervalVector(long jarg1, Box jarg11);

  public static native int boxIndex(long jarg1, Box jarg11, long jarg2, Variable jarg22);

  public static native long boxMaxDiam(long jarg1, Box jarg11);

  public static native long boxBisectSWIG0(long jarg1, Box jarg11, int jarg2);

  public static native long boxBisectSWIG1(long jarg1, Box jarg11, long jarg2, Variable jarg22);

  public static native long boxInplaceUnion(long jarg1, Box jarg11, long jarg2, Box jarg22);

  public static native long insertOperatorSWIG8(long jarg1, long jarg2, Box jarg22);

  public static native boolean equal(long jarg1, Box jarg11, long jarg2, Box jarg22);

  public static native boolean notEqual(long jarg1, Box jarg11, long jarg2, Box jarg22);

  public static native long displayDiff(
      long jarg1, long jarg2, VariableVector jarg22, long jarg3, long jarg4);

  public static native long newOptionValueBoolSWIG0(boolean jarg1);

  public static native long newOptionValueBoolSWIG1(long jarg1, OptionValueBool jarg11);

  public static native long optionValueBoolAssignOperatorSWIG0(
      long jarg1, OptionValueBool jarg11, long jarg2, OptionValueBool jarg22);

  public static native void deleteOptionValueBool(long jarg1);

  public static native long optionValueBoolAssignOperatorSWIG2(
      long jarg1, OptionValueBool jarg11, boolean jarg2);

  public static native long optionValueBoolAssignOperatorSWIG3(
      long jarg1, OptionValueBool jarg11, long jarg2);

  public static native boolean optionValueBoolGet(long jarg1, OptionValueBool jarg11);

  public static native void optionValueBoolSetFromCommandLine(
      long jarg1, OptionValueBool jarg11, boolean jarg2);

  public static native void optionValueBoolSetFromFile(
      long jarg1, OptionValueBool jarg11, boolean jarg2);

  public static native long newOptionValueIntSWIG0(int jarg1);

  public static native long newOptionValueIntSWIG1(long jarg1, OptionValueInt jarg11);

  public static native long optionValueIntAssignOperatorSWIG0(
      long jarg1, OptionValueInt jarg11, long jarg2, OptionValueInt jarg22);

  public static native void deleteOptionValueInt(long jarg1);

  public static native long optionValueIntAssignOperatorSWIG2(
      long jarg1, OptionValueInt jarg11, int jarg2);

  public static native long optionValueIntAssignOperatorSWIG3(
      long jarg1, OptionValueInt jarg11, long jarg2);

  public static native int optionValueIntGet(long jarg1, OptionValueInt jarg11);

  public static native void optionValueIntSetFromCommandLine(
      long jarg1, OptionValueInt jarg11, int jarg2);

  public static native void optionValueIntSetFromFile(long jarg1, OptionValueInt jarg11, int jarg2);

  public static native long newOptionValueDoubleSWIG0(double jarg1);

  public static native long newOptionValueDoubleSWIG1(long jarg1, OptionValueDouble jarg11);

  public static native long optionValueDoubleAssignOperatorSWIG0(
      long jarg1, OptionValueDouble jarg11, long jarg2, OptionValueDouble jarg22);

  public static native void deleteOptionValueDouble(long jarg1);

  public static native long optionValueDoubleAssignOperatorSWIG2(
      long jarg1, OptionValueDouble jarg11, double jarg2);

  public static native long optionValueDoubleAssignOperatorSWIG3(
      long jarg1, OptionValueDouble jarg11, long jarg2);

  public static native double optionValueDoubleGet(long jarg1, OptionValueDouble jarg11);

  public static native void optionValueDoubleSetFromCommandLine(
      long jarg1, OptionValueDouble jarg11, double jarg2);

  public static native void optionValueDoubleSetFromFile(
      long jarg1, OptionValueDouble jarg11, double jarg2);

  public static native long newOptionValueUnsignedIntSWIG0(long jarg1);

  public static native long newOptionValueUnsignedIntSWIG1(
      long jarg1, OptionValueUnsignedInt jarg11);

  public static native long optionValueUnsignedIntAssignOperatorSWIG0(
      long jarg1, OptionValueUnsignedInt jarg11, long jarg2, OptionValueUnsignedInt jarg22);

  public static native void deleteOptionValueUnsignedInt(long jarg1);

  public static native long optionValueUnsignedIntAssignOperatorSWIG2(
      long jarg1, OptionValueUnsignedInt jarg11, long jarg2);

  public static native long optionValueUnsignedIntGet(long jarg1, OptionValueUnsignedInt jarg11);

  public static native void optionValueUnsignedIntSetFromCommandLine(
      long jarg1, OptionValueUnsignedInt jarg11, long jarg2);

  public static native void optionValueUnsignedIntSetFromFile(
      long jarg1, OptionValueUnsignedInt jarg11, long jarg2);

  public static native long newConfigSWIG0();

  public static native long newConfigSWIG1(long jarg1, Config jarg11);

  public static native long configAssignOperatorSWIG0(
      long jarg1, Config jarg11, long jarg2, Config jarg22);

  public static native void deleteConfig(long jarg1);

  public static native double configPrecision(long jarg1, Config jarg11);

  public static native long configMutablePrecision(long jarg1, Config jarg11);

  public static native boolean configProduceModels(long jarg1, Config jarg11);

  public static native long configMutableProduceModels(long jarg1, Config jarg11);

  public static native boolean configUsePolytope(long jarg1, Config jarg11);

  public static native long configMutableUsePolytope(long jarg1, Config jarg11);

  public static native boolean configUsePolytopeInForall(long jarg1, Config jarg11);

  public static native long configMutableUsePolytopeInForall(long jarg1, Config jarg11);

  public static native boolean configUseWorklistFixpoint(long jarg1, Config jarg11);

  public static native long configMutableUseWorklistFixpoint(long jarg1, Config jarg11);

  public static native boolean configUseLocalOptimization(long jarg1, Config jarg11);

  public static native long configMutableUseLocalOptimization(long jarg1, Config jarg11);

  public static native boolean configDumpTheoryLiterals(long jarg1, Config jarg11);

  public static native long configMutableDumpTheoryLiterals(long jarg1, Config jarg11);

  public static native int configNumberOfJobs(long jarg1, Config jarg11);

  public static native long configMutableNumberOfJobs(long jarg1, Config jarg11);

  public static native boolean configStackLeftBoxFirst(long jarg1, Config jarg11);

  public static native long configMutableStackLeftBoxFirst(long jarg1, Config jarg11);

  public static native long configBrancher(long jarg1, Config jarg11);

  public static native long configMutableBrancher(long jarg1, Config jarg11);

  public static native double configNloptFtolRel(long jarg1, Config jarg11);

  public static native long configMutableNloptFtolRel(long jarg1, Config jarg11);

  public static native double configNloptFtolAbs(long jarg1, Config jarg11);

  public static native long configMutableNloptFtolAbs(long jarg1, Config jarg11);

  public static native int configNloptMaxeval(long jarg1, Config jarg11);

  public static native long configMutableNloptMaxeval(long jarg1, Config jarg11);

  public static native double configNloptMaxtime(long jarg1, Config jarg11);

  public static native long configMutableNloptMaxtime(long jarg1, Config jarg11);

  public static native int configSatDefaultPhaseFalseGet();

  public static native int configSatDefaultPhaseTrueGet();

  public static native int configSatDefaultPhaseJeroslowWangGet();

  public static native int configSatDefaultPhaseRandomInitialPhaseGet();

  public static native int configSatDefaultPhase(long jarg1, Config jarg11);

  public static native long configMutableSatDefaultPhase(long jarg1, Config jarg11);

  public static native long configRandomSeed(long jarg1, Config jarg11);

  public static native long configMutableRandomSeed(long jarg1, Config jarg11);

  public static native boolean configSmtlib2Compliant(long jarg1, Config jarg11);

  public static native long configMutableSmtlib2Compliant(long jarg1, Config jarg11);

  public static native double configKDefaultPrecisionGet();

  public static native double configKDefaultNloptFtolRelGet();

  public static native double configKDefaultNloptFtolAbsGet();

  public static native int configKDefaultNloptMaxEvalGet();

  public static native double configKDefaultNloptMaxTimeGet();

  public static native long insertOperatorSWIG9(long jarg1, int jarg2);

  public static native long insertOperatorSWIG22(long jarg1, long jarg2, Config jarg22);

  public static native boolean checkSatisfiabilitySWIG0(
      long jarg1, Formula jarg11, double jarg2, long jarg3, Box jarg33);

  public static native boolean checkSatisfiabilitySWIG1(
      long jarg1, Formula jarg11, long jarg2, Config jarg22, long jarg3, Box jarg33);

  public static native boolean minimizeSWIG0(
      long jarg1,
      Expression jarg11,
      long jarg2,
      Formula jarg22,
      double jarg3,
      long jarg4,
      Box jarg44);

  public static native boolean minimizeSWIG1(long jarg1, long jarg2, long jarg3, long jarg4);

  public static native long newContextSWIG0();

  public static native long newContextSWIG1(long jarg1, Context jarg11);

  public static native void deleteContext(long jarg1);

  public static native long newContextSWIG2(long jarg1, Config jarg11);

  public static native void contextAssert(long jarg1, Context jarg11, long jarg2, Formula jarg22);

  public static native long contextCheckSat(long jarg1, Context jarg11);

  public static native void contextDeclareVariableSWIG0(
      long jarg1, Context jarg11, long jarg2, Variable jarg22, boolean jarg3);

  public static native void contextDeclareVariableSWIG1(
      long jarg1, Context jarg11, long jarg2, Variable jarg22);

  public static native void contextDeclareVariableSWIG2(
      long jarg1, long jarg2, long jarg3, long jarg4, boolean jarg5);

  public static native void contextDeclareVariableSWIG3(
      long jarg1, long jarg2, long jarg3, long jarg4);

  public static native void contextExit();

  public static native void contextMinimizeSWIG0(
      long jarg1, Context jarg11, long jarg2, Expression jarg22);

  public static native void contextMinimizeSWIG1(
      long jarg1, Context jarg11, long jarg2, ExpressionVector jarg22);

  public static native void contextMaximize(
      long jarg1, Context jarg11, long jarg2, Expression jarg22);

  public static native void contextPop(long jarg1, Context jarg11, int jarg2);

  public static native void contextPush(long jarg1, Context jarg11, int jarg2);

  public static native void contextSetInfoSWIG0(
      long jarg1, Context jarg11, String jarg2, double jarg3);

  public static native void contextSetInfoSWIG1(
      long jarg1, Context jarg11, String jarg2, String jarg3);

  public static native void contextSetInterval(
      long jarg1, Context jarg11, long jarg2, Variable jarg22, double jarg3, double jarg4);

  public static native void contextSetLogic(long jarg1, Context jarg11, int jarg2);

  public static native void contextSetOptionSWIG0(
      long jarg1, Context jarg11, String jarg2, double jarg3);

  public static native void contextSetOptionSWIG1(
      long jarg1, Context jarg11, String jarg2, String jarg3);

  public static native long contextGetOption(long jarg1, Context jarg11, String jarg2);

  public static native long contextConfig(long jarg1, Context jarg11);

  public static native long contextMutableConfig(long jarg1, Context jarg11);

  public static native String contextVersion();

  public static native long contextAssertions(long jarg1, Context jarg11);

  public static native long contextBox(long jarg1, Context jarg11);

  public static native long contextGetModel(long jarg1, Context jarg11);

  // for VariableSet, added later
  public static native void variableSetIteratorIncrementUnchecked(
      long jarg1, VariableSet.Iterator jarg11);

  public static native long variableSetIteratorDerefUnchecked(
      long jarg1, VariableSet.Iterator jarg11);

  public static native boolean variableSetIteratorIsNot(
      long jarg1, VariableSet.Iterator jarg11, long jarg2, VariableSet.Iterator jarg22);

  public static native void deleteVariableSetIterator(long jarg1);

  public static native long newVariableSetSWIG0();

  public static native long newVariableSetSWIG1(long jarg1, VariableSet jarg11);

  public static native boolean variableSetIsEmpty(long jarg1, VariableSet jarg11);

  public static native void variableSetClear(long jarg1, VariableSet jarg11);

  public static native long variableSetBegin(long jarg1, VariableSet jarg11);

  public static native long variableSetEnd(long jarg1, VariableSet jarg11);

  public static native boolean variableSetAddImpl(
      long jarg1, VariableSet jarg11, long jarg2, Variable jarg22);

  public static native boolean variableSetContainsImpl(
      long jarg1, VariableSet jarg11, long jarg2, Variable jarg22);

  public static native boolean variableSetRemoveImpl(
      long jarg1, VariableSet jarg11, long jarg2, Variable jarg22);

  public static native int variableSetSizeImpl(long jarg1, VariableSet jarg11);

  public static native boolean variableSetHasNextImpl(
      long jarg1, VariableSet jarg11, long jarg2, VariableSet.Iterator jarg22);

  public static native void deleteVariableSet(long jarg1);

  // self written:
  public static native void configMutablePrecision0(double value, long config);

  public static native void configMutableProduceModels0(boolean bool, long config);

  public static native void configMutableUsePolytope0(boolean bool, long config);

  public static native void configMutableUsePolytopeInForall0(boolean bool, long config);

  public static native void configMutableUseWorklistFixpoint0(boolean bool, long config);

  public static native void configMutableUseLocalOptimization0(boolean bool, long config);

  public static native void configMutableDumpTheoryLiterals0(boolean bool, long config);

  public static native void configMutableNumberOfJobs0(int i, long config);

  public static native void configMutableStackLeftBoxFirst0(boolean bool, long config);

  public static native void configMutableNloptFtolRel0(double value, long config);

  public static native void configMutableNloptFtolAbs0(double value, long config);

  public static native void configMutableNloptMaxeval0(int i, long config);

  public static native void configMutableNloptMaxtime0(double value, long config);

  public static native void configMutableRandomSeed0(long seed, long config);

  public static native void configMutableSmtlib2Compliant0(boolean bool, long config);

  public static native void contextDeclareVariables(long context, long formula);

  public static native boolean contextCheckSat0(long context, long box);

  public static native void formulaGetQuantifiedVariables(long set, long formula);

  public static native long newExpressionSWIG4(long jarg1);

  public static native String getResult(long box, long var);

  public static native void getVariables(long set, long exp);

  public static native void formulaGetFreeVariables0(long set, long f);
}
