// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class ExpressionKind {
  public static final ExpressionKind.ExpressionType CONSTANT =
      new ExpressionKind.ExpressionType("Constant");
  public static final ExpressionKind.ExpressionType REAL_CONSTANT =
      new ExpressionKind.ExpressionType("RealConstant");
  public static final ExpressionKind.ExpressionType VAR = new ExpressionKind.ExpressionType("Var");
  public static final ExpressionKind.ExpressionType ADD = new ExpressionKind.ExpressionType("Add");
  public static final ExpressionKind.ExpressionType MUL = new ExpressionKind.ExpressionType("Mul");
  public static final ExpressionKind.ExpressionType DIV = new ExpressionKind.ExpressionType("Div");
  public static final ExpressionKind.ExpressionType LOG = new ExpressionKind.ExpressionType("Log");
  public static final ExpressionKind.ExpressionType ABS = new ExpressionKind.ExpressionType("Abs");
  public static final ExpressionKind.ExpressionType EXP = new ExpressionKind.ExpressionType("Exp");
  public static final ExpressionKind.ExpressionType SQRT =
      new ExpressionKind.ExpressionType("Sqrt");
  public static final ExpressionKind.ExpressionType POW = new ExpressionKind.ExpressionType("Pow");
  public static final ExpressionKind.ExpressionType SIN = new ExpressionKind.ExpressionType("Sin");
  public static final ExpressionKind.ExpressionType COS = new ExpressionKind.ExpressionType("Cos");
  public static final ExpressionKind.ExpressionType TAN = new ExpressionKind.ExpressionType("Tan");
  public static final ExpressionKind.ExpressionType ASIN =
      new ExpressionKind.ExpressionType("Asin");
  public static final ExpressionKind.ExpressionType ACOS =
      new ExpressionKind.ExpressionType("Acos");
  public static final ExpressionKind.ExpressionType ATAN =
      new ExpressionKind.ExpressionType("Atan");
  public static final ExpressionKind.ExpressionType ATAN2 =
      new ExpressionKind.ExpressionType("Atan2");
  public static final ExpressionKind.ExpressionType SINH =
      new ExpressionKind.ExpressionType("Sinh");
  public static final ExpressionKind.ExpressionType COSH =
      new ExpressionKind.ExpressionType("Cosh");
  public static final ExpressionKind.ExpressionType TANH =
      new ExpressionKind.ExpressionType("Tanh");
  public static final ExpressionKind.ExpressionType MIN = new ExpressionKind.ExpressionType("Min");
  public static final ExpressionKind.ExpressionType MAX = new ExpressionKind.ExpressionType("Max");
  public static final ExpressionKind.ExpressionType ITE =
      new ExpressionKind.ExpressionType("IfThenElse");
  public static final ExpressionKind.ExpressionType NAN = new ExpressionKind.ExpressionType("NaN");
  public static final ExpressionKind.ExpressionType UF =
      new ExpressionKind.ExpressionType("UninterpretedFunction");

  private static ExpressionKind.ExpressionType[] swigValues = {
    CONSTANT,
    REAL_CONSTANT,
    VAR,
    ADD,
    MUL,
    DIV,
    LOG,
    ABS,
    EXP,
    SQRT,
    POW,
    SIN,
    COS,
    TAN,
    ASIN,
    ACOS,
    ATAN,
    ATAN2,
    SINH,
    COSH,
    TANH,
    MIN,
    MAX,
    ITE,
    NAN,
    UF,
  };
  private static int swigNext = 0;

  @SuppressWarnings("unused")
  private ExpressionKind() {
    throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
  }

  public static ExpressionKind.ExpressionType swigToEnum(int swigValue) {
    if (swigValue < swigValues.length
        && swigValue >= 0
        && swigValues[swigValue].swigValue() == swigValue) {
      return swigValues[swigValue];
    }
    for (int i = 0; i < swigValues.length; i++) {
      if (swigValues[i].swigValue() == swigValue) {
        return swigValues[i];
      }
    }
    throw new IllegalArgumentException(
        "No enum " + ExpressionKind.ExpressionType.class + " with value " + swigValue);
  }

  public static class ExpressionType {

    private final int swigValue;
    private final String swigName;

    public ExpressionType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext;
      incrementSwigNext();
    }

    private void incrementSwigNext() {
      swigNext++;
    }

    public int swigValue() {
      return this.swigValue;
    }

    @Override
    public String toString() {
      return this.swigName;
    }
  }
}
