// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class Dreal {

  private Dreal() {
    throw new UnsupportedOperationException("This is a utility class and cannot be instantiated.");
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Variable var) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG0(SwigTypePStdOstream.getCPtr(os), Variable.getCPtr(var), var),
        false);
  }

  public static SwigTypePStdOstream insertOperator(
      SwigTypePStdOstream os, Variable.Type.Kind type) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG1(SwigTypePStdOstream.getCPtr(os), type.swigValue()), false);
  }

  public static boolean equal(Variables vars1, Variables vars2) {
    return DrealJNI.equalSWIG0(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2);
  }

  public static boolean less(Variables vars1, Variables vars2) {
    return DrealJNI.lessSWIG0(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2);
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream arg0, Variables vars) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG2(
            SwigTypePStdOstream.getCPtr(arg0), Variables.getCPtr(vars), vars),
        false);
  }

  public static Variables intersect(Variables vars1, Variables vars2) {
    return new Variables(
        DrealJNI.intersect(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2), true);
  }

  public static Variables addEqual(Variables vars1, Variables vars2) {
    return new Variables(
        DrealJNI.addEqualSWIG0(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2),
        true);
  }

  public static Variables addEqual(Variables vars, Variable var) {
    return new Variables(
        DrealJNI.addEqualSWIG1(Variables.getCPtr(vars), vars, Variable.getCPtr(var), var), true);
  }

  public static Variables add(Variables vars1, Variables vars2) {
    return new Variables(
        DrealJNI.addSWIG0(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2), true);
  }

  public static Variables add(Variables vars, Variable var) {
    return new Variables(
        DrealJNI.addSWIG1(Variables.getCPtr(vars), vars, Variable.getCPtr(var), var), true);
  }

  public static Variables add(Variable var, Variables vars) {
    return new Variables(
        DrealJNI.addSWIG2(Variable.getCPtr(var), var, Variables.getCPtr(vars), vars), true);
  }

  public static Variables substractEqual(Variables vars1, Variables vars2) {
    return new Variables(
        DrealJNI.substractEqualSWIG0(
            Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2),
        true);
  }

  public static Variables substractEqual(Variables vars, Variable var) {
    return new Variables(
        DrealJNI.substractEqualSWIG1(Variables.getCPtr(vars), vars, Variable.getCPtr(var), var),
        true);
  }

  public static Variables substract(Variables vars1, Variables vars2) {
    return new Variables(
        DrealJNI.substractSWIG0(Variables.getCPtr(vars1), vars1, Variables.getCPtr(vars2), vars2),
        true);
  }

  public static Variables substract(Variables vars, Variable var) {
    return new Variables(
        DrealJNI.substractSWIG1(Variables.getCPtr(vars), vars, Variable.getCPtr(var), var), true);
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Environment env) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG3(
            SwigTypePStdOstream.getCPtr(os), Environment.getCPtr(env), env),
        false);
  }

  public static boolean less(ExpressionKind.ExpressionType k1, ExpressionKind.ExpressionType k2) {
    return DrealJNI.lessSWIG1(k1.swigValue(), k2.swigValue());
  }

  public static Expression add(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.addSWIG3(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), true);
  }

  public static Expression addEqual(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.addEqualSWIG2(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), false);
  }

  public static Expression substract(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.substractSWIG2(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), true);
  }

  public static Expression substractEqual(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.substractEqualSWIG2(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs),
        false);
  }

  public static Expression add(Expression e) {
    return new Expression(DrealJNI.addSWIG7(Expression.getCPtr(e), e), true);
  }

  public static Expression substract(Expression e) {
    return new Expression(DrealJNI.substractSWIG6(Expression.getCPtr(e), e), true);
  }

  public static Expression multiply(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.multiplySWIG0(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), true);
  }

  public static Expression multiplyEqual(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.multiplyEqual(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), false);
  }

  public static Expression divide(Expression lhs, Expression rhs) {

    return new Expression(
        DrealJNI.divide(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), true);
  }

  public static Expression divideEqual(Expression lhs, Expression rhs) {
    return new Expression(
        DrealJNI.divideEqual(Expression.getCPtr(lhs), lhs, Expression.getCPtr(rhs), rhs), false);
  }

  public static Expression realConstant(double lb, double ub, boolean useLbAsRepresentative) {
    return new Expression(DrealJNI.realConstant(lb, ub, useLbAsRepresentative), true);
  }

  public static Expression log(Expression e) {
    return new Expression(DrealJNI.log(Expression.getCPtr(e), e), true);
  }

  public static Expression abs(Expression e) {
    return new Expression(DrealJNI.abs(Expression.getCPtr(e), e), true);
  }

  public static Expression exp(Expression e) {
    return new Expression(DrealJNI.exp(Expression.getCPtr(e), e), true);
  }

  public static Expression sqrt(Expression e) {
    return new Expression(DrealJNI.sqrt(Expression.getCPtr(e), e), true);
  }

  public static Expression pow(Expression e1, Expression e2) {
    return new Expression(
        DrealJNI.pow(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Expression sin(Expression e) {
    return new Expression(DrealJNI.sin(Expression.getCPtr(e), e), true);
  }

  public static Expression cos(Expression e) {
    return new Expression(DrealJNI.cos(Expression.getCPtr(e), e), true);
  }

  public static Expression tan(Expression e) {
    return new Expression(DrealJNI.tan(Expression.getCPtr(e), e), true);
  }

  public static Expression asin(Expression e) {
    return new Expression(DrealJNI.asin(Expression.getCPtr(e), e), true);
  }

  public static Expression acos(Expression e) {
    return new Expression(DrealJNI.acos(Expression.getCPtr(e), e), true);
  }

  public static Expression atan(Expression e) {
    return new Expression(DrealJNI.atan(Expression.getCPtr(e), e), true);
  }

  public static Expression atan2(Expression e1, Expression e2) {
    return new Expression(
        DrealJNI.atan2(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Expression sinh(Expression e) {
    return new Expression(DrealJNI.sinh(Expression.getCPtr(e), e), true);
  }

  public static Expression cosh(Expression e) {
    return new Expression(DrealJNI.cosh(Expression.getCPtr(e), e), true);
  }

  public static Expression tanh(Expression e) {
    return new Expression(DrealJNI.tanh(Expression.getCPtr(e), e), true);
  }

  public static Expression min(Expression e1, Expression e2) {
    return new Expression(
        DrealJNI.min(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Expression max(Expression e1, Expression e2) {
    return new Expression(
        DrealJNI.max(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Expression ifThenElse(Formula fCOnd, Expression eThen, Expression eElse) {
    return new Expression(
        DrealJNI.ifThenElse(
            Formula.getCPtr(fCOnd),
            fCOnd,
            Expression.getCPtr(eThen),
            eThen,
            Expression.getCPtr(eElse),
            eElse),
        true);
  }

  public static Expression uninterpretedFunction(String name, Variables vars) {
    return new Expression(
        DrealJNI.uninterpretedFunction(name, Variables.getCPtr(vars), vars), true);
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Expression e) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG4(SwigTypePStdOstream.getCPtr(os), Expression.getCPtr(e), e),
        false);
  }

  public static boolean isConstant(Expression e) {
    return DrealJNI.isConstantSWIG0(Expression.getCPtr(e), e);
  }

  public static boolean isRealConstant(Expression e) {
    return DrealJNI.isRealConstant(Expression.getCPtr(e), e);
  }

  public static boolean isVariable(Expression e) {
    return DrealJNI.isVariableSWIG0(Expression.getCPtr(e), e);
  }

  public static boolean isAddition(Expression e) {
    return DrealJNI.isAddition(Expression.getCPtr(e), e);
  }

  public static boolean isMultiplication(Expression e) {
    return DrealJNI.isMultiplication(Expression.getCPtr(e), e);
  }

  public static boolean isDivision(Expression e) {
    return DrealJNI.isDivision(Expression.getCPtr(e), e);
  }

  public static boolean isLog(Expression e) {
    return DrealJNI.isLog(Expression.getCPtr(e), e);
  }

  public static boolean isAbs(Expression e) {
    return DrealJNI.isAbs(Expression.getCPtr(e), e);
  }

  public static boolean isExp(Expression e) {
    return DrealJNI.isExp(Expression.getCPtr(e), e);
  }

  public static boolean isSqrt(Expression e) {
    return DrealJNI.isSqrt(Expression.getCPtr(e), e);
  }

  public static boolean isPow(Expression e) {
    return DrealJNI.isPow(Expression.getCPtr(e), e);
  }

  public static boolean isSin(Expression e) {
    return DrealJNI.isSin(Expression.getCPtr(e), e);
  }

  public static boolean isCos(Expression e) {
    return DrealJNI.isCos(Expression.getCPtr(e), e);
  }

  public static boolean isTan(Expression e) {
    return DrealJNI.isTan(Expression.getCPtr(e), e);
  }

  public static boolean isAsin(Expression e) {
    return DrealJNI.isAsin(Expression.getCPtr(e), e);
  }

  public static boolean isAcos(Expression e) {
    return DrealJNI.isAcos(Expression.getCPtr(e), e);
  }

  public static boolean isAtan(Expression e) {
    return DrealJNI.isAtan(Expression.getCPtr(e), e);
  }

  public static boolean isAtan2(Expression e) {
    return DrealJNI.isAtan2(Expression.getCPtr(e), e);
  }

  public static boolean isSinh(Expression e) {
    return DrealJNI.isSinh(Expression.getCPtr(e), e);
  }

  public static boolean isCosh(Expression e) {
    return DrealJNI.isCosh(Expression.getCPtr(e), e);
  }

  public static boolean isTanh(Expression e) {
    return DrealJNI.isTanh(Expression.getCPtr(e), e);
  }

  public static boolean isMin(Expression e) {
    return DrealJNI.isMin(Expression.getCPtr(e), e);
  }

  public static boolean isMax(Expression e) {
    return DrealJNI.isMax(Expression.getCPtr(e), e);
  }

  public static boolean isIfThenElse(Expression e) {
    return DrealJNI.isIfThenElse(Expression.getCPtr(e), e);
  }

  public static boolean isUninterpretedFunction(Expression e) {
    return DrealJNI.isUninterpretedFunction(Expression.getCPtr(e), e);
  }

  public static Expression sum(ExpressionVector expressions) {
    return new Expression(DrealJNI.sum(ExpressionVector.getCPtr(expressions), expressions), true);
  }

  public static Expression prod(ExpressionVector expressions) {
    return new Expression(DrealJNI.prod(ExpressionVector.getCPtr(expressions), expressions), true);
  }

  public static void swap(Expression a, Expression b) {
    DrealJNI.swap(Expression.getCPtr(a), a, Expression.getCPtr(b), b);
  }

  public static boolean isConstant(Expression e, double v) {
    return DrealJNI.isConstantSWIG1(Expression.getCPtr(e), e, v);
  }

  public static boolean isZero(Expression e) {
    return DrealJNI.isZero(Expression.getCPtr(e), e);
  }

  public static boolean isOne(Expression e) {
    return DrealJNI.isOne(Expression.getCPtr(e), e);
  }

  public static boolean isNegOne(Expression e) {
    return DrealJNI.isNegOne(Expression.getCPtr(e), e);
  }

  public static boolean isTwo(Expression e) {
    return DrealJNI.isTwo(Expression.getCPtr(e), e);
  }

  public static boolean isNan(Expression e) {
    return DrealJNI.isNan(Expression.getCPtr(e), e);
  }

  public static double getConstantValue(Expression e) {
    return DrealJNI.getConstantValue(Expression.getCPtr(e), e);
  }

  public static double getLbOfRealConstant(Expression e) {
    return DrealJNI.getLbOfRealConstant(Expression.getCPtr(e), e);
  }

  public static double getUbOfRealConstant(Expression e) {
    return DrealJNI.getUbOfRealConstant(Expression.getCPtr(e), e);
  }

  public static Variable getVariable(Expression e) {
    return new Variable(DrealJNI.getVariableSWIG0(Expression.getCPtr(e), e), false);
  }

  public static Expression getArgument(Expression e) {
    return new Expression(DrealJNI.getArgument(Expression.getCPtr(e), e), false);
  }

  public static Expression getFirstArgument(Expression e) {
    return new Expression(DrealJNI.getFirstArgument(Expression.getCPtr(e), e), false);
  }

  public static Expression getSecondArgument(Expression e) {
    return new Expression(DrealJNI.getSecondArgument(Expression.getCPtr(e), e), false);
  }

  public static double getConstantInAddition(Expression e) {
    return DrealJNI.getConstantInAddition(Expression.getCPtr(e), e);
  }

  public static ExpressionDoubleMap getExprToCoeffMapInAddition(Expression e) {
    return new ExpressionDoubleMap(
        DrealJNI.getExprToCoeffMapInAddition(Expression.getCPtr(e), e), false);
  }

  public static double getConstantInMultiplication(Expression e) {
    return DrealJNI.getConstantInMultiplication(Expression.getCPtr(e), e);
  }

  public static ExpressionExpressionMap getBaseToExponentMapInMultiplication(Expression e) {
    return new ExpressionExpressionMap(
        DrealJNI.getBaseToExponentMapInMultiplication(Expression.getCPtr(e), e), false);
  }

  public static Formula getConditionalFormula(Expression e) {
    return new Formula(DrealJNI.getConditionalFormula(Expression.getCPtr(e), e), false);
  }

  public static Expression getThenExpression(Expression e) {
    return new Expression(DrealJNI.getThenExpression(Expression.getCPtr(e), e), false);
  }

  public static Expression getElseExpression(Expression e) {
    return new Expression(DrealJNI.getElseExpression(Expression.getCPtr(e), e), false);
  }

  public static String getUninterpretedFunctionName(Expression e) {
    return DrealJNI.getUninterpretedFunctionName(Expression.getCPtr(e), e);
  }

  public static Expression add(Variable var) {
    return new Expression(DrealJNI.addSWIG8(Variable.getCPtr(var), var), true);
  }

  public static Expression substract(Variable var) {
    return new Expression(DrealJNI.substractSWIG8(Variable.getCPtr(var), var), true);
  }

  public static boolean less(FormulaKind.FormulaType k1, FormulaKind.FormulaType k2) {
    return DrealJNI.lessSWIG2(k1.swigValue(), k2.swigValue());
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Formula f) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG5(SwigTypePStdOstream.getCPtr(os), Formula.getCPtr(f), f),
        false);
  }

  public static boolean isFalse(Formula f) {
    return DrealJNI.isFalse(Formula.getCPtr(f), f);
  }

  public static boolean isTrue(Formula f) {
    return DrealJNI.isTrue(Formula.getCPtr(f), f);
  }

  public static boolean isVariable(Formula f) {
    return DrealJNI.isVariableSWIG1(Formula.getCPtr(f), f);
  }

  public static boolean isEqualTo(Formula f) {
    return DrealJNI.isEqualTo(Formula.getCPtr(f), f);
  }

  public static boolean isNotEqualTo(Formula f) {
    return DrealJNI.isNotEqualTo(Formula.getCPtr(f), f);
  }

  public static boolean isGreaterThan(Formula f) {
    return DrealJNI.isGreaterThan(Formula.getCPtr(f), f);
  }

  public static boolean isGreaterThanOrEqualTo(Formula f) {
    return DrealJNI.isGreaterThanOrEqualTo(Formula.getCPtr(f), f);
  }

  public static boolean isLessThan(Formula f) {
    return DrealJNI.isLessThan(Formula.getCPtr(f), f);
  }

  public static boolean isLessThanOrEqualTo(Formula f) {
    return DrealJNI.isLessThanOrEqualTo(Formula.getCPtr(f), f);
  }

  public static boolean isRelational(Formula f) {
    return DrealJNI.isRelational(Formula.getCPtr(f), f);
  }

  public static boolean isConjunction(Formula f) {
    return DrealJNI.isConjunction(Formula.getCPtr(f), f);
  }

  public static boolean isDisjunction(Formula f) {
    return DrealJNI.isDisjunction(Formula.getCPtr(f), f);
  }

  public static boolean isNegation(Formula f) {
    return DrealJNI.isNegation(Formula.getCPtr(f), f);
  }

  public static boolean isForall(Formula f) {
    return DrealJNI.isForall(Formula.getCPtr(f), f);
  }

  public static Formula not(Formula f) {
    return new Formula(DrealJNI.notSWIG0(Formula.getCPtr(f), f), true);
  }

  public static Formula equal(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.equalSWIG1(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula notEqual(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.notEqualSWIG0(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula less(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.lessSWIG3(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula lessEqual(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.lessEqual(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula grater(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.grater(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula graterEqual(Expression e1, Expression e2) {
    return new Formula(
        DrealJNI.graterEqual(Expression.getCPtr(e1), e1, Expression.getCPtr(e2), e2), true);
  }

  public static Formula forall(Variables vars, Formula f) {
    return new Formula(DrealJNI.forall(Variables.getCPtr(vars), vars, Formula.getCPtr(f), f), true);
  }

  public static Formula and(Formula f1, Formula f2) {
    return new Formula(DrealJNI.andSWIG0(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula and(Variable v, Formula f) {
    return new Formula(DrealJNI.andSWIG4(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula and(Formula f, Variable v) {
    return new Formula(DrealJNI.andSWIG6(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static Formula and(Variable v1, Variable v2) {
    return new Formula(DrealJNI.andSWIG8(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static Formula or(Formula f1, Formula f2) {
    return new Formula(DrealJNI.orSWIG0(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula or(Variable v, Formula f) {
    return new Formula(DrealJNI.orSWIG4(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula or(Formula f, Variable v) {
    return new Formula(DrealJNI.orSWIG6(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static Formula or(Variable v1, Variable v2) {
    return new Formula(DrealJNI.orSWIG8(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static Formula not(Variable v) {
    return new Formula(DrealJNI.notSWIG1(Variable.getCPtr(v), v), true);
  }

  public static Formula equal(Variable v1, Variable v2) {
    return new Formula(
        DrealJNI.equalSWIG2(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static Formula equal(Formula f1, Formula f2) {
    return new Formula(DrealJNI.equalSWIG3(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula equal(Variable v, Formula f) {
    return new Formula(DrealJNI.equalSWIG4(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula equal(Formula f, Variable v) {
    return new Formula(DrealJNI.equalSWIG5(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static Formula notEqual(Variable v1, Variable v2) {
    return new Formula(
        DrealJNI.notEqualSWIG1(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static Formula notEqual(Formula f1, Formula f2) {
    return new Formula(
        DrealJNI.notEqualSWIG2(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula notEqual(Variable v, Formula f) {
    return new Formula(DrealJNI.notEqualSWIG3(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula notEqual(Formula f, Variable v) {
    return new Formula(DrealJNI.notEqualSWIG4(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static boolean isNary(Formula f) {
    return DrealJNI.isNary(Formula.getCPtr(f), f);
  }

  public static Variable getVariable(Formula f) {
    return new Variable(DrealJNI.getVariableSWIG1(Formula.getCPtr(f), f), false);
  }

  public static Expression getLhsExpression(Formula f) {
    return new Expression(DrealJNI.getLhsExpression(Formula.getCPtr(f), f), false);
  }

  public static Expression getRhsExpression(Formula f) {
    return new Expression(DrealJNI.getRhsExpression(Formula.getCPtr(f), f), false);
  }

  public static FormulaSet getOperands(Formula f) {
    return new FormulaSet(DrealJNI.getOperands(Formula.getCPtr(f), f), false);
  }

  public static Formula getOperand(Formula f) {
    return new Formula(DrealJNI.getOperand(Formula.getCPtr(f), f), false);
  }

  public static Variables getQuantifiedVariables(Formula f) {
    return new Variables(DrealJNI.getQuantifiedVariables(Formula.getCPtr(f), f), false);
  }

  public static Formula getQuantifiedFormula(Formula f) {
    return new Formula(DrealJNI.getQuantifiedFormula(Formula.getCPtr(f), f), false);
  }

  public static Formula logicAnd(Formula f1, Formula f2) {
    return new Formula(DrealJNI.logicAnd(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula imply(Formula f1, Formula f2) {
    return new Formula(DrealJNI.implySWIG0(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula imply(Variable v, Formula f) {
    return new Formula(DrealJNI.implySWIG1(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula imply(Formula f, Variable v) {
    return new Formula(DrealJNI.implySWIG2(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static Formula imply(Variable v1, Variable v2) {
    return new Formula(
        DrealJNI.implySWIG3(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static Formula iff(Formula f1, Formula f2) {
    return new Formula(DrealJNI.iffSWIG0(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula iff(Variable v, Formula f) {
    return new Formula(DrealJNI.iffSWIG1(Variable.getCPtr(v), v, Formula.getCPtr(f), f), true);
  }

  public static Formula iff(Formula f, Variable v) {
    return new Formula(DrealJNI.iffSWIG2(Formula.getCPtr(f), f, Variable.getCPtr(v), v), true);
  }

  public static Formula iff(Variable v1, Variable v2) {
    return new Formula(DrealJNI.iffSWIG3(Variable.getCPtr(v1), v1, Variable.getCPtr(v2), v2), true);
  }

  public static FormulaSet map(
      FormulaSet formulas, SwigTypePStdFunctionTFormulaFFormulaConstRFT func) {
    return new FormulaSet(
        DrealJNI.map(
            FormulaSet.getCPtr(formulas),
            formulas,
            SwigTypePStdFunctionTFormulaFFormulaConstRFT.getCPtr(func)),
        true);
  }

  public static boolean isAtomic(Formula f) {
    return DrealJNI.isAtomic(Formula.getCPtr(f), f);
  }

  public static boolean isClause(Formula f) {
    return DrealJNI.isClause(Formula.getCPtr(f), f);
  }

  public static FormulaSet getClauses(Formula f) {
    return new FormulaSet(DrealJNI.getClauses(Formula.getCPtr(f), f), true);
  }

  public static boolean isCnf(Formula f) {
    return DrealJNI.isCnf(Formula.getCPtr(f), f);
  }

  public static boolean haveIntersection(Variables variables1, Variables variables2) {
    return DrealJNI.haveIntersection(
        Variables.getCPtr(variables1), variables1, Variables.getCPtr(variables2), variables2);
  }

  public static Formula deltaStrengthen(Formula f, double delta) {
    return new Formula(DrealJNI.deltaStrengthen(Formula.getCPtr(f), f, delta), true);
  }

  public static Formula deltaWeaken(Formula f, double delta) {
    return new Formula(DrealJNI.deltaWeaken(Formula.getCPtr(f), f, delta), true);
  }

  public static boolean isDifferentiable(Formula f) {
    return DrealJNI.isDifferentiableSWIG0(Formula.getCPtr(f), f);
  }

  public static boolean isDifferentiable(Expression e) {
    return DrealJNI.isDifferentiableSWIG1(Expression.getCPtr(e), e);
  }

  public static Formula makeConjunction(FormulaVector formulas) {
    return new Formula(DrealJNI.makeConjunction(FormulaVector.getCPtr(formulas), formulas), true);
  }

  public static Formula makeDisjunction(FormulaVector formulas) {
    return new Formula(DrealJNI.makeDisjunction(FormulaVector.getCPtr(formulas), formulas), true);
  }

  public static VariableVector createVector(String prefix, int size, Variable.Type.Kind type) {
    return new VariableVector(DrealJNI.createVectorSWIG0(prefix, size, type.swigValue()), true);
  }

  public static VariableVector createVector(String prefix, int size) {
    return new VariableVector(DrealJNI.createVectorSWIG1(prefix, size), true);
  }

  public static RelationalOperator.Type not(RelationalOperator.Type op) {
    return RelationalOperator.swigToEnum(DrealJNI.not(op.swigValue()));
  }

  public static SwigTypePStdOstream insertOperator(
      SwigTypePStdOstream os, RelationalOperator.Type op) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG6(SwigTypePStdOstream.getCPtr(os), op.swigValue()), false);
  }

  public static Logic.LogicType parseLogic(String s) {
    return Logic.swigToEnum(DrealJNI.parseLogic(s));
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Logic.LogicType logic) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG7(SwigTypePStdOstream.getCPtr(os), logic.swigValue()), false);
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Box box) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG8(SwigTypePStdOstream.getCPtr(os), Box.getCPtr(box), box),
        false);
  }

  public static boolean equal(Box b1, Box b2) {
    return DrealJNI.equal(Box.getCPtr(b1), b1, Box.getCPtr(b2), b2);
  }

  public static boolean notEqual(Box b1, Box b2) {
    return DrealJNI.notEqual(Box.getCPtr(b1), b1, Box.getCPtr(b2), b2);
  }

  public static SwigTypePStdOstream displayDiff(
      SwigTypePStdOstream os,
      VariableVector variables,
      SwigTypePIbexIntervalVector oldIv,
      SwigTypePIbexIntervalVector newIv) {
    return new SwigTypePStdOstream(
        DrealJNI.displayDiff(
            SwigTypePStdOstream.getCPtr(os),
            VariableVector.getCPtr(variables),
            variables,
            SwigTypePIbexIntervalVector.getCPtr(oldIv),
            SwigTypePIbexIntervalVector.getCPtr(newIv)),
        false);
  }

  public static SwigTypePStdOstream insertOperator(
      SwigTypePStdOstream os, Config.SatDefaultPhase satDefaultPhase) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG9(SwigTypePStdOstream.getCPtr(os), satDefaultPhase.swigValue()),
        false);
  }

  public static SwigTypePStdOstream insertOperator(SwigTypePStdOstream os, Config config) {
    return new SwigTypePStdOstream(
        DrealJNI.insertOperatorSWIG22(
            SwigTypePStdOstream.getCPtr(os), Config.getCPtr(config), config),
        false);
  }

  public static boolean checkSatisfiability(Formula f, double delta, Box box) {
    return DrealJNI.checkSatisfiabilitySWIG0(Formula.getCPtr(f), f, delta, Box.getCPtr(box), box);
  }

  public static boolean checkSatisfiability(Formula f, Config config, Box box) {
    return DrealJNI.checkSatisfiabilitySWIG1(
        Formula.getCPtr(f), f, Config.getCPtr(config), config, Box.getCPtr(box), box);
  }

  public static boolean minimize(Expression objective, Formula constraint, double delta, Box box) {
    return DrealJNI.minimizeSWIG0(
        Expression.getCPtr(objective),
        objective,
        Formula.getCPtr(constraint),
        constraint,
        delta,
        Box.getCPtr(box),
        box);
  }

  public static boolean minimize(Expression objective, Formula constraint, Config config, Box box) {
    return DrealJNI.minimizeSWIG1(
        Expression.getCPtr(objective),
        Formula.getCPtr(constraint),
        Config.getCPtr(config),
        Box.getCPtr(box));
  }

  // self written
  /**
   * This function reads the result of one variable from the model(Box). It should be known what
   * variable is called, to save the String with the associated variable.
   *
   * @param box to read the values of the variables
   * @param var to get the value associated with the variable of the box
   * @return String with the value, value is the lower-bound or ENTIRE or EMPTY
   */
  public static String getResult(Box box, Variable var) {
    // returns EMPTY or lower-bound; upperbound as String
    String result = DrealJNI.getResult(Box.getCPtr(box), Variable.getCPtr(var));
    if (result.equals("EMPTY")) {
      return "EMPTY";
    }
    String[] bounds = result.split("; ", -1);
    if (bounds[0].equals(bounds[1])) {
      return bounds[0];
      // Probably not needed, because it is already evaluated to True e.g. x * 1 == x is
      // evaluated to True and variable x does not exist in result anymore
    } else if (bounds[0].equals("-inf") && bounds[1].equals("inf")) {
      return "ENTIRE";
    } else if (bounds[0].equals("-inf") || bounds[1].equals("inf")) {
      if (bounds[0].equals("-inf")) {
        return bounds[1];
      } else {
        return bounds[0];
      }
    } else {
      return bounds[0];
    }
  }
}
