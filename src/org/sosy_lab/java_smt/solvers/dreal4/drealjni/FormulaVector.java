// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import javax.annotation.concurrent.NotThreadSafe;

@NotThreadSafe
public class FormulaVector extends java.util.AbstractList<Formula>
    implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected FormulaVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FormulaVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(FormulaVector obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn) {
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      }
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DrealJNI.deleteFormulaVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  @SuppressWarnings("unused")
  public FormulaVector(Formula[] initialElements) {
    this();
    reserve(initialElements.length);
    this.addAll(Arrays.asList(initialElements));
  }

  @SuppressWarnings("unused")
  public FormulaVector(Iterable<Formula> initialElements) {
    this();
    Iterables.addAll(this, initialElements);
  }

  @Override
  public Formula get(int index) {
    return doGet(index);
  }

  @Override
  public Formula set(int index, Formula e) {
    return doSet(index, e);
  }

  @Override
  public boolean add(Formula e) {
    modCount++;
    doAdd(e);
    return true;
  }

  @Override
  public void add(int index, Formula e) {
    modCount++;
    doAdd(index, e);
  }

  @Override
  public Formula remove(int index) {
    modCount++;
    return doRemove(index);
  }

  @Override
  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  @Override
  public int size() {
    return doSize();
  }

  public FormulaVector() {
    this(DrealJNI.newFormulaVectorSWIG0(), true);
  }

  public FormulaVector(FormulaVector other) {
    this(DrealJNI.newFormulaVectorSWIG1(FormulaVector.getCPtr(other), other), true);
  }

  public long capacity() {
    return DrealJNI.formulaVectorCapacity(swigCPtr, this);
  }

  public void reserve(long n) {
    DrealJNI.formulaVectorReserve(swigCPtr, this, n);
  }

  @Override
  public boolean isEmpty() {
    return DrealJNI.formulaVectorIsEmpty(swigCPtr, this);
  }

  @Override
  public void clear() {
    DrealJNI.formulaVectorClear(swigCPtr, this);
  }

  public FormulaVector(int count, Formula value) {
    this(DrealJNI.newFormulaVectorSWIG2(count, Formula.getCPtr(value), value), true);
  }

  private int doSize() {
    return DrealJNI.formulaVectorDoSize(swigCPtr, this);
  }

  private void doAdd(Formula x) {
    DrealJNI.formulaVectorDoAddSWIG0(swigCPtr, this, Formula.getCPtr(x), x);
  }

  private void doAdd(int index, Formula x) {
    DrealJNI.formulaVectorDoAddSWIG1(swigCPtr, this, index, Formula.getCPtr(x), x);
  }

  private Formula doRemove(int index) {
    return new Formula(DrealJNI.formulaVectorDoRemove(swigCPtr, this, index), true);
  }

  private Formula doGet(int index) {
    return new Formula(DrealJNI.formulaVectorDoGet(swigCPtr, this, index), false);
  }

  private Formula doSet(int index, Formula val) {
    return new Formula(
        DrealJNI.formulaVectorDoSet(swigCPtr, this, index, Formula.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    DrealJNI.formulaVectorDoRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
