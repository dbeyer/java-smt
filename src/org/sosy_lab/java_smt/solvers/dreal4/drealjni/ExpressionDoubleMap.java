// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

import javax.annotation.concurrent.NotThreadSafe;

@NotThreadSafe
public class ExpressionDoubleMap extends java.util.AbstractMap<Expression, Double> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ExpressionDoubleMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ExpressionDoubleMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(ExpressionDoubleMap obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn) {
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      }
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DrealJNI.deleteExpressionDoubleMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  @Override
  public int size() {
    return sizeImpl();
  }

  @Override
  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof Expression)) {
      return false;
    }

    return containsImpl((Expression) key);
  }

  @Override
  public Double get(java.lang.Object key) {
    if (!(key instanceof Expression)) {
      return null;
    }

    Iterator itr = find((Expression) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }

    return null;
  }

  @Override
  public Double put(Expression key, Double value) {
    Iterator itr = find(key);
    if (itr.isNot(end())) {
      Double oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }

  @Override
  public Double remove(java.lang.Object key) {
    if (!(key instanceof Expression)) {
      return null;
    }

    Iterator itr = find((Expression) key);
    if (itr.isNot(end())) {
      Double oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }

  @Override
  public java.util.Set<Entry<Expression, Double>> entrySet() {
    java.util.Set<Entry<Expression, Double>> setToReturn = new java.util.HashSet<>();

    Iterator itr = begin();
    final Iterator end = end();
    while (itr.isNot(end)) {
      setToReturn.add(
          new Entry<Expression, Double>() {
            private Iterator iterator;

            private Entry<Expression, Double> init(Iterator iter) {
              this.iterator = iter;
              return this;
            }

            @Override
            public Expression getKey() {
              return iterator.getKey();
            }

            @Override
            public Double getValue() {
              return iterator.getValue();
            }

            @Override
            public Double setValue(Double newValue) {
              Double oldValue = iterator.getValue();
              iterator.setValue(newValue);
              return oldValue;
            }
          }.init(itr));
      itr = itr.getNextUnchecked();
    }

    return setToReturn;
  }

  public ExpressionDoubleMap() {
    this(DrealJNI.newExpressionDoubleMapSWIG0(), true);
  }

  public ExpressionDoubleMap(ExpressionDoubleMap other) {
    this(DrealJNI.newExpressionDoubleMapSWIG1(ExpressionDoubleMap.getCPtr(other), other), true);
  }

  @NotThreadSafe
  protected static class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;

    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }

    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }

    protected static long swigRelease(Iterator obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn) {
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        }
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }

    @SuppressWarnings("deprecation")
    protected void finalize1() {
      delete();
    }

    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DrealJNI.deleteExpressionDoubleMapIterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }

    private ExpressionDoubleMap.Iterator getNextUnchecked() {
      return new ExpressionDoubleMap.Iterator(
          DrealJNI.expressionDoubleMapIteratorGetNextUnchecked(swigCPtr, this), true);
    }

    private boolean isNot(ExpressionDoubleMap.Iterator other) {
      return DrealJNI.expressionDoubleMapIteratorIsNot(
          swigCPtr, this, ExpressionDoubleMap.Iterator.getCPtr(other), other);
    }

    private Expression getKey() {
      return new Expression(DrealJNI.expressionDoubleMapIteratorGetKey(swigCPtr, this), true);
    }

    private double getValue() {
      return DrealJNI.expressionDoubleMapIteratorGetValue(swigCPtr, this);
    }

    private void setValue(double newValue) {
      DrealJNI.expressionDoubleMapIteratorSetValue(swigCPtr, this, newValue);
    }
  }

  @Override
  public boolean isEmpty() {
    return DrealJNI.expressionDoubleMapIsEmpty(swigCPtr, this);
  }

  @Override
  public void clear() {
    DrealJNI.expressionDoubleMapClear(swigCPtr, this);
  }

  private ExpressionDoubleMap.Iterator find(Expression key) {
    return new ExpressionDoubleMap.Iterator(
        DrealJNI.expressionDoubleMapFind(swigCPtr, this, Expression.getCPtr(key), key), true);
  }

  private ExpressionDoubleMap.Iterator begin() {
    return new ExpressionDoubleMap.Iterator(
        DrealJNI.expressionDoubleMapBegin(swigCPtr, this), true);
  }

  private ExpressionDoubleMap.Iterator end() {
    return new ExpressionDoubleMap.Iterator(DrealJNI.expressionDoubleMapEnd(swigCPtr, this), true);
  }

  private int sizeImpl() {
    return DrealJNI.expressionDoubleMapSizeImpl(swigCPtr, this);
  }

  private boolean containsImpl(Expression key) {
    return DrealJNI.expressionDoubleMapContainsImpl(swigCPtr, this, Expression.getCPtr(key), key);
  }

  private void putUnchecked(Expression key, double value) {
    DrealJNI.expressionDoubleMapPutUnchecked(swigCPtr, this, Expression.getCPtr(key), key, value);
  }

  private void removeUnchecked(ExpressionDoubleMap.Iterator itr) {
    DrealJNI.expressionDoubleMapRemoveUnchecked(
        swigCPtr, this, ExpressionDoubleMap.Iterator.getCPtr(itr), itr);
  }
}
