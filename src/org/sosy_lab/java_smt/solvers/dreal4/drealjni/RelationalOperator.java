// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2023 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class RelationalOperator {
  public static final RelationalOperator.Type EQ = new RelationalOperator.Type("EQ");
  public static final RelationalOperator.Type NEQ = new RelationalOperator.Type("NEQ");
  public static final RelationalOperator.Type GT = new RelationalOperator.Type("GT");
  public static final RelationalOperator.Type GEQ = new RelationalOperator.Type("GEQ");
  public static final RelationalOperator.Type LT = new RelationalOperator.Type("LT");
  public static final RelationalOperator.Type LEQ = new RelationalOperator.Type("LEQ");
  private static RelationalOperator.Type[] swigValues = {EQ, NEQ, GT, GEQ, LT, LEQ};
  private static int swigNext = 0;

  @SuppressWarnings("unused")
  private RelationalOperator() {
    throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
  }

  public static RelationalOperator.Type swigToEnum(int swigValue) {
    if (swigValue < swigValues.length
        && swigValue >= 0
        && swigValues[swigValue].swigValue == swigValue) {
      return swigValues[swigValue];
    }
    for (int i = 0; i < swigValues.length; i++) {
      if (swigValues[i].swigValue == swigValue) {
        return swigValues[i];
      }
    }
    throw new IllegalArgumentException(
        "No enum " + RelationalOperator.Type.class + " with value " + swigValue);
  }

  public static class Type {

    private final int swigValue;
    private final String swigName;

    public Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext;
      incrementSwigNext();
    }

    private void incrementSwigNext() {
      swigNext++;
    }

    public int swigValue() {
      return this.swigValue;
    }

    @Override
    public String toString() {
      return this.swigName;
    }
  }
}
